% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_probRaster.R
\name{get_probRaster}
\alias{get_probRaster}
\title{get_probRaster}
\usage{
get_probRaster(
  fetch,
  zm,
  grid,
  speed,
  direction,
  uStar,
  zd,
  v_var,
  L,
  lon,
  lat,
  timestamp,
  FP_probs = 0.99,
  input_raster,
  prob = TRUE,
  exctract = FALSE
)
}
\arguments{
\item{fetch}{source area maximum distance in meters for the footprint (radious).}

\item{zm}{EC measurement height above ground (in meter)}

\item{grid}{the grid size (square)}

\item{speed}{wind speed}

\item{direction}{wind direction}

\item{uStar}{friction velocity}

\item{zd}{roughness length}

\item{v_var}{sigma var}

\item{L}{stability parameter}

\item{lon}{longitude of the EC tower}

\item{lat}{latitude of the EC tower}

\item{timestamp}{datetime (Lubridate)}

\item{FP_probs}{probability to keep as the main ellipse area - suggested 0.99}
}
\value{
It returns a data frame (or vector) with the FP average extracted from the tower's location.
}
\description{
This is a function to extract footprint FP for inputs or outputs for the EC towers source area.
It extracts the FP average (i.e. sum of probability) for inputs in a multilayer stack or brick raster, or
in a data frame (timestamp, output values per "pixel number").
}
\examples{
## Examples of uses of the extract_fp function
# fix time and no resample (as before) - Atlas Maps
# fix time resample from a map of entire the Berlin - Atlas Maps
# varying in time using a multilayer raster stacked hourly (if daily change timestamp from ymd_hms to ymd)
# varying in time using a data frame with all pixels values and timestamp together - modeled ET

n = 8760
# ROTH location, fix in time and no resample. The raster has to be cropped and reproject to FP before

FP_ROTH_extrated <- data.frame(t(sapply(1:n, function(i) extract_fp(
  fetch = 1000, zm = 40 , grid = 200, lon = 385566.5, lat = 5813229, # constants
  speed = na.approx(EC_ROTH$ws)[i], # FP input variables
  direction = na.approx(EC_ROTH$wd)[i],
  uStar = na.approx(EC_ROTH$u.)[i],
  zd = na.approx(EC_ROTH$zd)[i],
  v_var = na.approx(EC_ROTH$v_var)[i],
  L = na.approx(EC_ROTH$L)[i],
  timestamp = EC_ROTH$timestamp[i],
  FP_probs = 0.9925, # FP probability
  fix_time = TRUE, # default
  resample_raster = FALSE,
  input_raster = atlas_maps_ROTH_FP # raster model inputs - utm
)) ))


}
